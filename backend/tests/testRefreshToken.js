/**
 * TEST REFRESH TOKEN MODEL
 * Sinh vi√™n 3: Test l∆∞u v√† truy xu·∫•t RefreshToken
 * 
 * C√°ch ch·∫°y:
 * 1. ƒê·∫£m b·∫£o MongoDB ƒëang ch·∫°y v√† .env ƒë√£ config
 * 2. Ch·∫°y: node tests/testRefreshToken.js
 */

import mongoose from "mongoose";
import dotenv from "dotenv";
import crypto from "crypto";
import RefreshToken from "../models/refreshTokenModel.js";
import User from "../models/userModel.js";

dotenv.config();

// M√†u s·∫Øc cho console
const colors = {
  reset: "\x1b[0m",
  green: "\x1b[32m",
  red: "\x1b[31m",
  yellow: "\x1b[33m",
  blue: "\x1b[36m",
};

const log = {
  success: (msg) => console.log(`${colors.green}‚úì ${msg}${colors.reset}`),
  error: (msg) => console.log(`${colors.red}‚úó ${msg}${colors.reset}`),
  info: (msg) => console.log(`${colors.blue}‚Ñπ ${msg}${colors.reset}`),
  test: (msg) => console.log(`\n${colors.yellow}‚ñ∂ TEST: ${msg}${colors.reset}`),
};

// K·∫øt n·ªëi MongoDB
async function connectDB() {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    log.success("K·∫øt n·ªëi MongoDB th√†nh c√¥ng");
  } catch (err) {
    log.error(`L·ªói k·∫øt n·ªëi MongoDB: ${err.message}`);
    process.exit(1);
  }
}

// T·∫°o user test
async function createTestUser() {
  try {
    // X√≥a user test c≈© n·∫øu c√≥
    await User.deleteOne({ email: "test@refreshtoken.com" });
    
    const user = await User.create({
      name: "Test User",
      email: "test@refreshtoken.com",
      password: "hashedpassword123",
      role: "user",
    });
    
    log.success(`T·∫°o test user: ${user.email}`);
    return user;
  } catch (err) {
    log.error(`L·ªói t·∫°o user: ${err.message}`);
    throw err;
  }
}

// Test 1: T·∫°o v√† l∆∞u RefreshToken
async function test1_CreateToken(userId) {
  log.test("1. T·∫°o v√† l∆∞u RefreshToken");
  
  try {
    const token = crypto.randomBytes(64).toString("hex");
    const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 ng√†y
    
    const refreshToken = await RefreshToken.create({
      token,
      userId,
      expiresAt,
      deviceInfo: "Chrome on Windows",
      ipAddress: "192.168.1.1",
    });
    
    log.success("T·∫°o RefreshToken th√†nh c√¥ng");
    log.info(`  - Token ID: ${refreshToken._id}`);
    log.info(`  - Token: ${refreshToken.token.substring(0, 20)}...`);
    log.info(`  - User ID: ${refreshToken.userId}`);
    log.info(`  - Expires At: ${refreshToken.expiresAt}`);
    log.info(`  - Is Revoked: ${refreshToken.isRevoked}`);
    
    return refreshToken;
  } catch (err) {
    log.error(`L·ªói t·∫°o token: ${err.message}`);
    throw err;
  }
}

// Test 2: Truy xu·∫•t RefreshToken theo token string
async function test2_FindByToken(tokenString) {
  log.test("2. Truy xu·∫•t RefreshToken theo token string");
  
  try {
    const found = await RefreshToken.findOne({ token: tokenString });
    
    if (!found) {
      log.error("Kh√¥ng t√¨m th·∫•y token");
      return null;
    }
    
    log.success("T√¨m th·∫•y RefreshToken");
    log.info(`  - Token ID: ${found._id}`);
    log.info(`  - User ID: ${found.userId}`);
    log.info(`  - Is Revoked: ${found.isRevoked}`);
    
    return found;
  } catch (err) {
    log.error(`L·ªói t√¨m token: ${err.message}`);
    throw err;
  }
}

// Test 3: S·ª≠ d·ª•ng static method findValidToken
async function test3_FindValidToken(tokenString) {
  log.test("3. S·ª≠ d·ª•ng findValidToken (static method)");
  
  try {
    const validToken = await RefreshToken.findValidToken(tokenString);
    
    if (!validToken) {
      log.error("Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
      return null;
    }
    
    log.success("Token h·ª£p l·ªá");
    log.info(`  - Token ID: ${validToken._id}`);
    log.info(`  - User: ${validToken.userId?.name || validToken.userId}`);
    log.info(`  - Email: ${validToken.userId?.email || "N/A"}`);
    
    return validToken;
  } catch (err) {
    log.error(`L·ªói: ${err.message}`);
    throw err;
  }
}

// Test 4: Revoke token
async function test4_RevokeToken(tokenId) {
  log.test("4. Revoke (thu h·ªìi) token");
  
  try {
    const token = await RefreshToken.findById(tokenId);
    
    if (!token) {
      log.error("Kh√¥ng t√¨m th·∫•y token");
      return;
    }
    
    await token.revoke();
    
    log.success("Revoke token th√†nh c√¥ng");
    log.info(`  - Is Revoked: ${token.isRevoked}`);
    
    // Ki·ªÉm tra l·∫°i v·ªõi findValidToken
    const stillValid = await RefreshToken.findValidToken(token.token);
    if (!stillValid) {
      log.success("Token ƒë√£ kh√¥ng c√≤n h·ª£p l·ªá sau khi revoke");
    } else {
      log.error("L·ªói: Token v·∫´n c√≤n h·ª£p l·ªá sau khi revoke");
    }
  } catch (err) {
    log.error(`L·ªói revoke: ${err.message}`);
    throw err;
  }
}

// Test 5: T·∫°o nhi·ªÅu token cho c√πng 1 user
async function test5_MultipleTokens(userId) {
  log.test("5. T·∫°o nhi·ªÅu token cho c√πng 1 user");
  
  try {
    const tokens = [];
    
    for (let i = 0; i < 3; i++) {
      const token = crypto.randomBytes(64).toString("hex");
      const expiresAt = new Date(Date.now() + (i + 1) * 24 * 60 * 60 * 1000);
      
      const refreshToken = await RefreshToken.create({
        token,
        userId,
        expiresAt,
        deviceInfo: `Device ${i + 1}`,
      });
      
      tokens.push(refreshToken);
    }
    
    log.success(`T·∫°o ${tokens.length} token th√†nh c√¥ng`);
    
    // T√¨m t·∫•t c·∫£ token c·ªßa user
    const userTokens = await RefreshToken.find({ userId, isRevoked: false });
    log.info(`  - T·ªïng s·ªë token active c·ªßa user: ${userTokens.length}`);
    
    return tokens;
  } catch (err) {
    log.error(`L·ªói: ${err.message}`);
    throw err;
  }
}

// Test 6: Revoke t·∫•t c·∫£ token c·ªßa user
async function test6_RevokeAllUserTokens(userId) {
  log.test("6. Revoke t·∫•t c·∫£ token c·ªßa user");
  
  try {
    const result = await RefreshToken.revokeAllUserTokens(userId);
    
    log.success(`Revoke th√†nh c√¥ng ${result.modifiedCount} token`);
    
    // Ki·ªÉm tra l·∫°i
    const remainingTokens = await RefreshToken.find({ 
      userId, 
      isRevoked: false 
    });
    
    log.info(`  - S·ªë token c√≤n l·∫°i (active): ${remainingTokens.length}`);
    
    if (remainingTokens.length === 0) {
      log.success("T·∫•t c·∫£ token ƒë√£ ƒë∆∞·ª£c revoke");
    } else {
      log.error("V·∫´n c√≤n token ch∆∞a ƒë∆∞·ª£c revoke");
    }
  } catch (err) {
    log.error(`L·ªói: ${err.message}`);
    throw err;
  }
}

// Test 7: Test token h·∫øt h·∫°n
async function test7_ExpiredToken(userId) {
  log.test("7. Test token ƒë√£ h·∫øt h·∫°n");
  
  try {
    const token = crypto.randomBytes(64).toString("hex");
    const expiresAt = new Date(Date.now() - 1000); // H·∫øt h·∫°n t·ª´ 1 gi√¢y tr∆∞·ªõc
    
    const expiredToken = await RefreshToken.create({
      token,
      userId,
      expiresAt,
    });
    
    log.success("T·∫°o expired token th√†nh c√¥ng");
    
    // Th·ª≠ t√¨m v·ªõi findValidToken
    const found = await RefreshToken.findValidToken(token);
    
    if (!found) {
      log.success("findValidToken ƒë√∫ng c√°ch b·ªè qua token h·∫øt h·∫°n");
    } else {
      log.error("L·ªói: findValidToken v·∫´n tr·∫£ v·ªÅ token h·∫øt h·∫°n");
    }
    
    return expiredToken;
  } catch (err) {
    log.error(`L·ªói: ${err.message}`);
    throw err;
  }
}

// Cleanup - X√≥a d·ªØ li·ªáu test
async function cleanup() {
  log.test("Cleanup - X√≥a d·ªØ li·ªáu test");
  
  try {
    await RefreshToken.deleteMany({ deviceInfo: /^(Device|Chrome)/ });
    await User.deleteOne({ email: "test@refreshtoken.com" });
    
    log.success("X√≥a d·ªØ li·ªáu test th√†nh c√¥ng");
  } catch (err) {
    log.error(`L·ªói cleanup: ${err.message}`);
  }
}

// Main test runner
async function runAllTests() {
  console.log("\n" + "=".repeat(60));
  console.log("   üß™ TEST REFRESH TOKEN MODEL - SINH VI√äN 3");
  console.log("=".repeat(60) + "\n");
  
  try {
    // K·∫øt n·ªëi DB
    await connectDB();
    
    // T·∫°o test user
    const user = await createTestUser();
    
    // Test 1: T·∫°o token
    const token1 = await test1_CreateToken(user._id);
    
    // Test 2: T√¨m token
    await test2_FindByToken(token1.token);
    
    // Test 3: Find valid token
    await test3_FindValidToken(token1.token);
    
    // Test 4: Revoke token
    await test4_RevokeToken(token1._id);
    
    // Test 5: Multiple tokens
    await test5_MultipleTokens(user._id);
    
    // Test 6: Revoke all
    await test6_RevokeAllUserTokens(user._id);
    
    // Test 7: Expired token
    await test7_ExpiredToken(user._id);
    
    // Cleanup
    await cleanup();
    
    console.log("\n" + "=".repeat(60));
    log.success("T·∫§T C·∫¢ TEST HO√ÄN TH√ÄNH TH√ÄNH C√îNG! üéâ");
    console.log("=".repeat(60) + "\n");
    
  } catch (err) {
    console.log("\n" + "=".repeat(60));
    log.error(`TEST TH·∫§T B·∫†I: ${err.message}`);
    console.log("=".repeat(60) + "\n");
  } finally {
    await mongoose.connection.close();
    log.info("ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB");
  }
}

// Ch·∫°y tests
runAllTests();

